---
title: "Practical II"
format: html
author: LMNSIP001
---

#QUESTION 1

```{r}
library(foreach)
x<-foreach(i=1:100)%do%rexp(50,rate=1)
x<-matrix(unlist(x),nrow=100)
mean_x<-apply(x,2,mean)
variance_x<-apply(x,2,var)

mean_variance<-rbind(mean_x,variance_x)
mean_variance
knitr:kable(data.frame(mean_x,variance_x),digits=4,col.names=c("Mean","Variance"))
```

# QUESTION2

```{r}
library(MASS)        
library(doParallel) 
library(foreach)     

# register a cluster:
cl <- makeCluster(3)
registerDoParallel(cl)

K <- 1000
gal <- galaxies
parallel_time <- system.time({
  parallel_med <- foreach(i = 1:K, .combine = c, .packages = 'MASS') %dopar% {
    median(sample(gal, length(gal), replace = TRUE))
  }
})

# Stop cluster
stopCluster(cl)

cat("Parallel time\n")
(p_time)


s_time <- system.time({
  parallel_med <- foreach(i = 1:N, .combine = c, .packages = 'MASS') %do% {
    median(sample(gal, length(gal), replace = TRUE))
  }
})

cat("Serial time\n")
(s_time)
```

#QUESTION 3

```{r}
set.seed(1)
N<-1000
true_mean<-1
means_b<-numeric(N)

cl<-makeCluster(3)
registerDoParallel(cl)

count<-foreach(i = 1 :N, .combine = "+")%dopar%{
  data<-rexp(50,rate=1)
  means_b<-replicate(N,mean(sample(data,replace=TRUE)))
  QI<-quantile(means_b,c(0.025,0.975))
  if (QI[1]<=true_mean && QI[2]>=true_mean){
  return(1) 
 }else{
  return(0)
 }

}

coverage <- count/B
coverage
```

#QESTION 4
```{r}
library(foreach)

set.seed(1234)
result <- foreach(i = 1:3) %do% {
  it <- irnorm(5)
  nextElem(it)
  nextElem(it)
  nextElem(it)

}

for (i in 1:3) {
  maxi <- max(result[[i]])
  print(maxi)
}

```

#QUESTION5
```{r}
library(parallel)

set.seed(1234)
result <- function() {
  it <- irnorm(5)
  nextElem(it)
  nextElem(it)
  nextElem(it)
}

# For the foreach method
system.time({
result1 <- foreach(i = 1:3) %do% {
  result()
}

for (i in 1:3) {
  maxi <- max(result1[[i]])
  print(maxi)
}
})

#For the parLapply method
cl <- makeCluster(3)
clusterExport(cl, "result")
clusterEvalQ(cl, library(iterators))

system.time({
parL <- parLapply(cl, 1:3, function(i){
  result()

})

for (i in 1:3) {
  maxi <- max(parL[[i]])
  print(maxi)
}
})


# for replicate method
set.seed(1234)
system.time({
result2 <- replicate(n = 3, result())

for (i in 1:3) {
  maxi <- max(result2[,i])
  print(maxi)
}
})

```

